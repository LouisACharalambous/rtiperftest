// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file perftest.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PERFTEST_H_
#define _PERFTEST_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(perftest_SOURCE)
#define perftest_DllAPI __declspec( dllexport )
#else
#define perftest_DllAPI __declspec( dllimport )
#endif // perftest_SOURCE
#else
#define perftest_DllAPI
#endif
#else
#define perftest_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const int32_t MAX_BOUNDED_SEQ_SIZE = 1048576;
const int32_t RTI_FLATDATA_MAX_SIZE = 10485760;
const int32_t MAX_PERFTEST_SAMPLE_SIZE = 2147482620;
const int32_t MAX_CFT_VALUE = 65535;
const int32_t KEY_SIZE = 4;
const uint32_t DEFAULT_THROUGHPUT_BATCH_SIZE = 8192;
/*!
 * @brief This class represents the structure TestData_t defined by the user in the IDL file.
 * @ingroup PERFTEST
 */
class TestData_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestData_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestData_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestData_t that will be copied.
     */
    eProsima_user_DllExport TestData_t(const TestData_t &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestData_t that will be copied.
     */
    eProsima_user_DllExport TestData_t(TestData_t &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestData_t that will be copied.
     */
    eProsima_user_DllExport TestData_t& operator=(const TestData_t &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestData_t that will be copied.
     */
    eProsima_user_DllExport TestData_t& operator=(TestData_t &&x);

    /*!
     * @brief This function copies the value in member key
     * @param _key New value to be copied in member key
     */
    eProsima_user_DllExport void key(const std::array<uint8_t, KEY_SIZE> &_key);

    /*!
     * @brief This function moves the value in member key
     * @param _key New value to be moved in member key
     */
    eProsima_user_DllExport void key(std::array<uint8_t, KEY_SIZE> &&_key);

    /*!
     * @brief This function returns a constant reference to member key
     * @return Constant reference to member key
     */
    eProsima_user_DllExport const std::array<uint8_t, KEY_SIZE>& key() const;

    /*!
     * @brief This function returns a reference to member key
     * @return Reference to member key
     */
    eProsima_user_DllExport std::array<uint8_t, KEY_SIZE>& key();
    /*!
     * @brief This function sets a value in member entity_id
     * @param _entity_id New value for member entity_id
     */
    eProsima_user_DllExport void entity_id(int32_t _entity_id);

    /*!
     * @brief This function returns the value of member entity_id
     * @return Value of member entity_id
     */
    eProsima_user_DllExport int32_t entity_id() const;

    /*!
     * @brief This function returns a reference to member entity_id
     * @return Reference to member entity_id
     */
    eProsima_user_DllExport int32_t& entity_id();

    /*!
     * @brief This function sets a value in member seq_num
     * @param _seq_num New value for member seq_num
     */
    eProsima_user_DllExport void seq_num(uint32_t _seq_num);

    /*!
     * @brief This function returns the value of member seq_num
     * @return Value of member seq_num
     */
    eProsima_user_DllExport uint32_t seq_num() const;

    /*!
     * @brief This function returns a reference to member seq_num
     * @return Reference to member seq_num
     */
    eProsima_user_DllExport uint32_t& seq_num();

    /*!
     * @brief This function sets a value in member timestamp_sec
     * @param _timestamp_sec New value for member timestamp_sec
     */
    eProsima_user_DllExport void timestamp_sec(int32_t _timestamp_sec);

    /*!
     * @brief This function returns the value of member timestamp_sec
     * @return Value of member timestamp_sec
     */
    eProsima_user_DllExport int32_t timestamp_sec() const;

    /*!
     * @brief This function returns a reference to member timestamp_sec
     * @return Reference to member timestamp_sec
     */
    eProsima_user_DllExport int32_t& timestamp_sec();

    /*!
     * @brief This function sets a value in member timestamp_usec
     * @param _timestamp_usec New value for member timestamp_usec
     */
    eProsima_user_DllExport void timestamp_usec(uint32_t _timestamp_usec);

    /*!
     * @brief This function returns the value of member timestamp_usec
     * @return Value of member timestamp_usec
     */
    eProsima_user_DllExport uint32_t timestamp_usec() const;

    /*!
     * @brief This function returns a reference to member timestamp_usec
     * @return Reference to member timestamp_usec
     */
    eProsima_user_DllExport uint32_t& timestamp_usec();

    /*!
     * @brief This function sets a value in member latency_ping
     * @param _latency_ping New value for member latency_ping
     */
    eProsima_user_DllExport void latency_ping(int32_t _latency_ping);

    /*!
     * @brief This function returns the value of member latency_ping
     * @return Value of member latency_ping
     */
    eProsima_user_DllExport int32_t latency_ping() const;

    /*!
     * @brief This function returns a reference to member latency_ping
     * @return Reference to member latency_ping
     */
    eProsima_user_DllExport int32_t& latency_ping();

    /*!
     * @brief This function copies the value in member bin_data
     * @param _bin_data New value to be copied in member bin_data
     */
    eProsima_user_DllExport void bin_data(const std::vector<uint8_t> &_bin_data);

    /*!
     * @brief This function moves the value in member bin_data
     * @param _bin_data New value to be moved in member bin_data
     */
    eProsima_user_DllExport void bin_data(std::vector<uint8_t> &&_bin_data);

    /*!
     * @brief This function returns a constant reference to member bin_data
     * @return Constant reference to member bin_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& bin_data() const;

    /*!
     * @brief This function returns a reference to member bin_data
     * @return Reference to member bin_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& bin_data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const TestData_t& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::array<uint8_t, KEY_SIZE> m_key;
    int32_t m_entity_id;
    uint32_t m_seq_num;
    int32_t m_timestamp_sec;
    uint32_t m_timestamp_usec;
    int32_t m_latency_ping;
    std::vector<uint8_t> m_bin_data;
};
/*!
 * @brief This class represents the structure TestDataKeyed_t defined by the user in the IDL file.
 * @ingroup PERFTEST
 */
class TestDataKeyed_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestDataKeyed_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestDataKeyed_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestDataKeyed_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyed_t(const TestDataKeyed_t &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestDataKeyed_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyed_t(TestDataKeyed_t &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestDataKeyed_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyed_t& operator=(const TestDataKeyed_t &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestDataKeyed_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyed_t& operator=(TestDataKeyed_t &&x);

    /*!
     * @brief This function copies the value in member key
     * @param _key New value to be copied in member key
     */
    eProsima_user_DllExport void key(const std::array<uint8_t, KEY_SIZE> &_key);

    /*!
     * @brief This function moves the value in member key
     * @param _key New value to be moved in member key
     */
    eProsima_user_DllExport void key(std::array<uint8_t, KEY_SIZE> &&_key);

    /*!
     * @brief This function returns a constant reference to member key
     * @return Constant reference to member key
     */
    eProsima_user_DllExport const std::array<uint8_t, KEY_SIZE>& key() const;

    /*!
     * @brief This function returns a reference to member key
     * @return Reference to member key
     */
    eProsima_user_DllExport std::array<uint8_t, KEY_SIZE>& key();
    /*!
     * @brief This function sets a value in member entity_id
     * @param _entity_id New value for member entity_id
     */
    eProsima_user_DllExport void entity_id(int32_t _entity_id);

    /*!
     * @brief This function returns the value of member entity_id
     * @return Value of member entity_id
     */
    eProsima_user_DllExport int32_t entity_id() const;

    /*!
     * @brief This function returns a reference to member entity_id
     * @return Reference to member entity_id
     */
    eProsima_user_DllExport int32_t& entity_id();

    /*!
     * @brief This function sets a value in member seq_num
     * @param _seq_num New value for member seq_num
     */
    eProsima_user_DllExport void seq_num(uint32_t _seq_num);

    /*!
     * @brief This function returns the value of member seq_num
     * @return Value of member seq_num
     */
    eProsima_user_DllExport uint32_t seq_num() const;

    /*!
     * @brief This function returns a reference to member seq_num
     * @return Reference to member seq_num
     */
    eProsima_user_DllExport uint32_t& seq_num();

    /*!
     * @brief This function sets a value in member timestamp_sec
     * @param _timestamp_sec New value for member timestamp_sec
     */
    eProsima_user_DllExport void timestamp_sec(int32_t _timestamp_sec);

    /*!
     * @brief This function returns the value of member timestamp_sec
     * @return Value of member timestamp_sec
     */
    eProsima_user_DllExport int32_t timestamp_sec() const;

    /*!
     * @brief This function returns a reference to member timestamp_sec
     * @return Reference to member timestamp_sec
     */
    eProsima_user_DllExport int32_t& timestamp_sec();

    /*!
     * @brief This function sets a value in member timestamp_usec
     * @param _timestamp_usec New value for member timestamp_usec
     */
    eProsima_user_DllExport void timestamp_usec(uint32_t _timestamp_usec);

    /*!
     * @brief This function returns the value of member timestamp_usec
     * @return Value of member timestamp_usec
     */
    eProsima_user_DllExport uint32_t timestamp_usec() const;

    /*!
     * @brief This function returns a reference to member timestamp_usec
     * @return Reference to member timestamp_usec
     */
    eProsima_user_DllExport uint32_t& timestamp_usec();

    /*!
     * @brief This function sets a value in member latency_ping
     * @param _latency_ping New value for member latency_ping
     */
    eProsima_user_DllExport void latency_ping(int32_t _latency_ping);

    /*!
     * @brief This function returns the value of member latency_ping
     * @return Value of member latency_ping
     */
    eProsima_user_DllExport int32_t latency_ping() const;

    /*!
     * @brief This function returns a reference to member latency_ping
     * @return Reference to member latency_ping
     */
    eProsima_user_DllExport int32_t& latency_ping();

    /*!
     * @brief This function copies the value in member bin_data
     * @param _bin_data New value to be copied in member bin_data
     */
    eProsima_user_DllExport void bin_data(const std::vector<uint8_t> &_bin_data);

    /*!
     * @brief This function moves the value in member bin_data
     * @param _bin_data New value to be moved in member bin_data
     */
    eProsima_user_DllExport void bin_data(std::vector<uint8_t> &&_bin_data);

    /*!
     * @brief This function returns a constant reference to member bin_data
     * @return Constant reference to member bin_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& bin_data() const;

    /*!
     * @brief This function returns a reference to member bin_data
     * @return Reference to member bin_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& bin_data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const TestDataKeyed_t& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::array<uint8_t, KEY_SIZE> m_key;
    int32_t m_entity_id;
    uint32_t m_seq_num;
    int32_t m_timestamp_sec;
    uint32_t m_timestamp_usec;
    int32_t m_latency_ping;
    std::vector<uint8_t> m_bin_data;
};
/*!
 * @brief This class represents the structure TestDataLarge_t defined by the user in the IDL file.
 * @ingroup PERFTEST
 */
class TestDataLarge_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestDataLarge_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestDataLarge_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestDataLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataLarge_t(const TestDataLarge_t &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestDataLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataLarge_t(TestDataLarge_t &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestDataLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataLarge_t& operator=(const TestDataLarge_t &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestDataLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataLarge_t& operator=(TestDataLarge_t &&x);

    /*!
     * @brief This function copies the value in member key
     * @param _key New value to be copied in member key
     */
    eProsima_user_DllExport void key(const std::array<uint8_t, KEY_SIZE> &_key);

    /*!
     * @brief This function moves the value in member key
     * @param _key New value to be moved in member key
     */
    eProsima_user_DllExport void key(std::array<uint8_t, KEY_SIZE> &&_key);

    /*!
     * @brief This function returns a constant reference to member key
     * @return Constant reference to member key
     */
    eProsima_user_DllExport const std::array<uint8_t, KEY_SIZE>& key() const;

    /*!
     * @brief This function returns a reference to member key
     * @return Reference to member key
     */
    eProsima_user_DllExport std::array<uint8_t, KEY_SIZE>& key();
    /*!
     * @brief This function sets a value in member entity_id
     * @param _entity_id New value for member entity_id
     */
    eProsima_user_DllExport void entity_id(int32_t _entity_id);

    /*!
     * @brief This function returns the value of member entity_id
     * @return Value of member entity_id
     */
    eProsima_user_DllExport int32_t entity_id() const;

    /*!
     * @brief This function returns a reference to member entity_id
     * @return Reference to member entity_id
     */
    eProsima_user_DllExport int32_t& entity_id();

    /*!
     * @brief This function sets a value in member seq_num
     * @param _seq_num New value for member seq_num
     */
    eProsima_user_DllExport void seq_num(uint32_t _seq_num);

    /*!
     * @brief This function returns the value of member seq_num
     * @return Value of member seq_num
     */
    eProsima_user_DllExport uint32_t seq_num() const;

    /*!
     * @brief This function returns a reference to member seq_num
     * @return Reference to member seq_num
     */
    eProsima_user_DllExport uint32_t& seq_num();

    /*!
     * @brief This function sets a value in member timestamp_sec
     * @param _timestamp_sec New value for member timestamp_sec
     */
    eProsima_user_DllExport void timestamp_sec(int32_t _timestamp_sec);

    /*!
     * @brief This function returns the value of member timestamp_sec
     * @return Value of member timestamp_sec
     */
    eProsima_user_DllExport int32_t timestamp_sec() const;

    /*!
     * @brief This function returns a reference to member timestamp_sec
     * @return Reference to member timestamp_sec
     */
    eProsima_user_DllExport int32_t& timestamp_sec();

    /*!
     * @brief This function sets a value in member timestamp_usec
     * @param _timestamp_usec New value for member timestamp_usec
     */
    eProsima_user_DllExport void timestamp_usec(uint32_t _timestamp_usec);

    /*!
     * @brief This function returns the value of member timestamp_usec
     * @return Value of member timestamp_usec
     */
    eProsima_user_DllExport uint32_t timestamp_usec() const;

    /*!
     * @brief This function returns a reference to member timestamp_usec
     * @return Reference to member timestamp_usec
     */
    eProsima_user_DllExport uint32_t& timestamp_usec();

    /*!
     * @brief This function sets a value in member latency_ping
     * @param _latency_ping New value for member latency_ping
     */
    eProsima_user_DllExport void latency_ping(int32_t _latency_ping);

    /*!
     * @brief This function returns the value of member latency_ping
     * @return Value of member latency_ping
     */
    eProsima_user_DllExport int32_t latency_ping() const;

    /*!
     * @brief This function returns a reference to member latency_ping
     * @return Reference to member latency_ping
     */
    eProsima_user_DllExport int32_t& latency_ping();

    /*!
     * @brief This function copies the value in member bin_data
     * @param _bin_data New value to be copied in member bin_data
     */
    eProsima_user_DllExport void bin_data(const std::vector<uint8_t> &_bin_data);

    /*!
     * @brief This function moves the value in member bin_data
     * @param _bin_data New value to be moved in member bin_data
     */
    eProsima_user_DllExport void bin_data(std::vector<uint8_t> &&_bin_data);

    /*!
     * @brief This function returns a constant reference to member bin_data
     * @return Constant reference to member bin_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& bin_data() const;

    /*!
     * @brief This function returns a reference to member bin_data
     * @return Reference to member bin_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& bin_data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const TestDataLarge_t& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::array<uint8_t, KEY_SIZE> m_key;
    int32_t m_entity_id;
    uint32_t m_seq_num;
    int32_t m_timestamp_sec;
    uint32_t m_timestamp_usec;
    int32_t m_latency_ping;
    std::vector<uint8_t> m_bin_data;
};
/*!
 * @brief This class represents the structure TestDataKeyedLarge_t defined by the user in the IDL file.
 * @ingroup PERFTEST
 */
class TestDataKeyedLarge_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestDataKeyedLarge_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestDataKeyedLarge_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestDataKeyedLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyedLarge_t(const TestDataKeyedLarge_t &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestDataKeyedLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyedLarge_t(TestDataKeyedLarge_t &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestDataKeyedLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyedLarge_t& operator=(const TestDataKeyedLarge_t &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestDataKeyedLarge_t that will be copied.
     */
    eProsima_user_DllExport TestDataKeyedLarge_t& operator=(TestDataKeyedLarge_t &&x);

    /*!
     * @brief This function copies the value in member key
     * @param _key New value to be copied in member key
     */
    eProsima_user_DllExport void key(const std::array<uint8_t, KEY_SIZE> &_key);

    /*!
     * @brief This function moves the value in member key
     * @param _key New value to be moved in member key
     */
    eProsima_user_DllExport void key(std::array<uint8_t, KEY_SIZE> &&_key);

    /*!
     * @brief This function returns a constant reference to member key
     * @return Constant reference to member key
     */
    eProsima_user_DllExport const std::array<uint8_t, KEY_SIZE>& key() const;

    /*!
     * @brief This function returns a reference to member key
     * @return Reference to member key
     */
    eProsima_user_DllExport std::array<uint8_t, KEY_SIZE>& key();
    /*!
     * @brief This function sets a value in member entity_id
     * @param _entity_id New value for member entity_id
     */
    eProsima_user_DllExport void entity_id(int32_t _entity_id);

    /*!
     * @brief This function returns the value of member entity_id
     * @return Value of member entity_id
     */
    eProsima_user_DllExport int32_t entity_id() const;

    /*!
     * @brief This function returns a reference to member entity_id
     * @return Reference to member entity_id
     */
    eProsima_user_DllExport int32_t& entity_id();

    /*!
     * @brief This function sets a value in member seq_num
     * @param _seq_num New value for member seq_num
     */
    eProsima_user_DllExport void seq_num(uint32_t _seq_num);

    /*!
     * @brief This function returns the value of member seq_num
     * @return Value of member seq_num
     */
    eProsima_user_DllExport uint32_t seq_num() const;

    /*!
     * @brief This function returns a reference to member seq_num
     * @return Reference to member seq_num
     */
    eProsima_user_DllExport uint32_t& seq_num();

    /*!
     * @brief This function sets a value in member timestamp_sec
     * @param _timestamp_sec New value for member timestamp_sec
     */
    eProsima_user_DllExport void timestamp_sec(int32_t _timestamp_sec);

    /*!
     * @brief This function returns the value of member timestamp_sec
     * @return Value of member timestamp_sec
     */
    eProsima_user_DllExport int32_t timestamp_sec() const;

    /*!
     * @brief This function returns a reference to member timestamp_sec
     * @return Reference to member timestamp_sec
     */
    eProsima_user_DllExport int32_t& timestamp_sec();

    /*!
     * @brief This function sets a value in member timestamp_usec
     * @param _timestamp_usec New value for member timestamp_usec
     */
    eProsima_user_DllExport void timestamp_usec(uint32_t _timestamp_usec);

    /*!
     * @brief This function returns the value of member timestamp_usec
     * @return Value of member timestamp_usec
     */
    eProsima_user_DllExport uint32_t timestamp_usec() const;

    /*!
     * @brief This function returns a reference to member timestamp_usec
     * @return Reference to member timestamp_usec
     */
    eProsima_user_DllExport uint32_t& timestamp_usec();

    /*!
     * @brief This function sets a value in member latency_ping
     * @param _latency_ping New value for member latency_ping
     */
    eProsima_user_DllExport void latency_ping(int32_t _latency_ping);

    /*!
     * @brief This function returns the value of member latency_ping
     * @return Value of member latency_ping
     */
    eProsima_user_DllExport int32_t latency_ping() const;

    /*!
     * @brief This function returns a reference to member latency_ping
     * @return Reference to member latency_ping
     */
    eProsima_user_DllExport int32_t& latency_ping();

    /*!
     * @brief This function copies the value in member bin_data
     * @param _bin_data New value to be copied in member bin_data
     */
    eProsima_user_DllExport void bin_data(const std::vector<uint8_t> &_bin_data);

    /*!
     * @brief This function moves the value in member bin_data
     * @param _bin_data New value to be moved in member bin_data
     */
    eProsima_user_DllExport void bin_data(std::vector<uint8_t> &&_bin_data);

    /*!
     * @brief This function returns a constant reference to member bin_data
     * @return Constant reference to member bin_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& bin_data() const;

    /*!
     * @brief This function returns a reference to member bin_data
     * @return Reference to member bin_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& bin_data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const TestDataKeyedLarge_t& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::array<uint8_t, KEY_SIZE> m_key;
    int32_t m_entity_id;
    uint32_t m_seq_num;
    int32_t m_timestamp_sec;
    uint32_t m_timestamp_usec;
    int32_t m_latency_ping;
    std::vector<uint8_t> m_bin_data;
};

#endif // _PERFTEST_H_